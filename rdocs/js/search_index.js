var search_data = {"index":{"searchIndex":["eqot","geolatlng","addr=()","ajd_to_datetime()","al_sun()","angle_delta_oblique()","angle_delta_orbit()","angle_delta_psi()","angle_equation_of_time()","apparent_longitude()","apparent_longitude_string()","bd()","center()","check_date_nil()","check_date_zero()","check_jct_nil()","check_jct_zero()","check_jd_nil()","check_jd_zero()","check_t_nil()","check_t_zero()","cosd()","cosine_al_sun()","cosine_apparent_longitude()","cosine_tl_sun()","cosine_to_earth()","cosine_true_longitude()","cosine_true_obliquity()","dec_sun()","declination()","declination_string()","deg_to_rad()","degrees_to_radians()","degrees_to_s()","delta_epsilon()","delta_equinox()","delta_oblique()","delta_orbit()","delta_psi()","delta_t_ecliptic()","delta_t_elliptic()","display_equation_of_time()","display_time_string()","eccentricity_earth()","eccentricity_earth_orbit()","eot()","eot_jd()","eq_of_equinox()","equation_of_center()","factor()","geometric_mean_longitude()","get_coordinates_from_address()","gml_sun()","ha_sun()","horizon_angle()","jd_to_date_string()","julian_period_day_fraction_to_time()","ma_sun()","mean_anomaly()","mean_anomaly_string()","mean_local_noon_dt()","mean_longitude_aries()","mean_obliquity()","mean_obliquity_of_ecliptic()","ml_aries()","mo_earth()","mod_360()","new()","new()","now()","obliquity_correction()","omega()","ra_sun()","rad_to_deg()","radians_to_degrees()","right_ascension()","right_ascension_string()","show_minutes()","show_now()","sind()","sine_al_sun()","sine_apparent_longitude()","sine_tl_sun()","sine_true_longitude()","string_al_sun()","string_day_fraction_to_time()","string_dec_sun()","string_delta_oblique()","string_delta_orbit()","string_eot()","string_eqc()","string_jd_to_date()","string_ma_sun()","string_ra_sun()","string_ta_sun()","string_time()","string_tl_sun()","string_to_earth()","sunrise_dt()","sunrise_jd()","sunset_dt()","sunset_jd()","ta_sun()","time_delta_oblique()","time_delta_orbit()","time_eot()","time_julian_centurey()","time_julian_century()","tl_aries()","tl_sun()","to_earth()","to_deg()","true_anomaly()","true_anomaly_string()","true_longitude()","true_longitude_aries()","true_longitude_string()","true_obliquity()","true_obliquity_string()","truncate()","readme","readme","wiki"],"longSearchIndex":["eqot","geolatlng","geolatlng#addr=()","eqot#ajd_to_datetime()","eqot#al_sun()","eqot#angle_delta_oblique()","eqot#angle_delta_orbit()","eqot#angle_delta_psi()","eqot#angle_equation_of_time()","eqot#apparent_longitude()","eqot#apparent_longitude_string()","eqot#bd()","eqot#center()","eqot#check_date_nil()","eqot#check_date_zero()","eqot#check_jct_nil()","eqot#check_jct_zero()","eqot#check_jd_nil()","eqot#check_jd_zero()","eqot#check_t_nil()","eqot#check_t_zero()","eqot#cosd()","eqot#cosine_al_sun()","eqot#cosine_apparent_longitude()","eqot#cosine_tl_sun()","eqot#cosine_to_earth()","eqot#cosine_true_longitude()","eqot#cosine_true_obliquity()","eqot#dec_sun()","eqot#declination()","eqot#declination_string()","eqot#deg_to_rad()","eqot#degrees_to_radians()","eqot#degrees_to_s()","eqot#delta_epsilon()","eqot#delta_equinox()","eqot#delta_oblique()","eqot#delta_orbit()","eqot#delta_psi()","eqot#delta_t_ecliptic()","eqot#delta_t_elliptic()","eqot#display_equation_of_time()","eqot#display_time_string()","eqot#eccentricity_earth()","eqot#eccentricity_earth_orbit()","eqot#eot()","eqot#eot_jd()","eqot#eq_of_equinox()","eqot#equation_of_center()","eqot#factor()","eqot#geometric_mean_longitude()","geolatlng#get_coordinates_from_address()","eqot#gml_sun()","eqot#ha_sun()","eqot#horizon_angle()","eqot#jd_to_date_string()","eqot#julian_period_day_fraction_to_time()","eqot#ma_sun()","eqot#mean_anomaly()","eqot#mean_anomaly_string()","eqot#mean_local_noon_dt()","eqot#mean_longitude_aries()","eqot#mean_obliquity()","eqot#mean_obliquity_of_ecliptic()","eqot#ml_aries()","eqot#mo_earth()","eqot#mod_360()","eqot::new()","geolatlng::new()","eqot#now()","eqot#obliquity_correction()","eqot#omega()","eqot#ra_sun()","eqot#rad_to_deg()","eqot#radians_to_degrees()","eqot#right_ascension()","eqot#right_ascension_string()","eqot#show_minutes()","eqot#show_now()","eqot#sind()","eqot#sine_al_sun()","eqot#sine_apparent_longitude()","eqot#sine_tl_sun()","eqot#sine_true_longitude()","eqot#string_al_sun()","eqot#string_day_fraction_to_time()","eqot#string_dec_sun()","eqot#string_delta_oblique()","eqot#string_delta_orbit()","eqot#string_eot()","eqot#string_eqc()","eqot#string_jd_to_date()","eqot#string_ma_sun()","eqot#string_ra_sun()","eqot#string_ta_sun()","eqot#string_time()","eqot#string_tl_sun()","eqot#string_to_earth()","eqot#sunrise_dt()","eqot#sunrise_jd()","eqot#sunset_dt()","eqot#sunset_jd()","eqot#ta_sun()","eqot#time_delta_oblique()","eqot#time_delta_orbit()","eqot#time_eot()","eqot#time_julian_centurey()","eqot#time_julian_century()","eqot#tl_aries()","eqot#tl_sun()","eqot#to_earth()","eqot#to_deg()","eqot#true_anomaly()","eqot#true_anomaly_string()","eqot#true_longitude()","eqot#true_longitude_aries()","eqot#true_longitude_string()","eqot#true_obliquity()","eqot#true_obliquity_string()","eqot#truncate()","","",""],"info":[["EqoT","","EqoT.html","","<p>angles.rb\n<p>displays.rb\n<p>init.rb\n"],["GeoLatLng","","GeoLatLng.html","","<p>class for location lookup  in geo_lat_lng_smt.rb\n"],["addr=","GeoLatLng","GeoLatLng.html#method-i-addr-3D","(addr = @default_int)","<p>set address\n"],["ajd_to_datetime","EqoT","EqoT.html#method-i-ajd_to_datetime","(ajd)","<p>From times.rb:<br> Pass in an AJD number Returns a DateTime object\n"],["al_Sun","EqoT","EqoT.html#method-i-al_Sun","( ta = A2000 )","<p>From angles.rb:<br>  Apparent solar longitude = true longitude - aberation\n"],["angle_delta_oblique","EqoT","EqoT.html#method-i-angle_delta_oblique","( ta = A2000 )","<p>From angles.rb:<br> one time component to total equation of time\n"],["angle_delta_orbit","EqoT","EqoT.html#method-i-angle_delta_orbit","( ta = A2000 )","<p>From angles.rb:<br>  one time component to total equation of time\n"],["angle_delta_psi","EqoT","EqoT.html#method-i-angle_delta_psi","( ta = A2000 )","<p>From angles.rb:<br> component of equation of equinox\n"],["angle_equation_of_time","EqoT","EqoT.html#method-i-angle_equation_of_time","( ta = A2000 )","<p>From angles.rb:<br> total equation of time\n"],["apparent_longitude","EqoT","EqoT.html#method-i-apparent_longitude","( ta = A2000 )",""],["apparent_longitude_string","EqoT","EqoT.html#method-i-apparent_longitude_string","( ta = A2000 )",""],["bd","EqoT","EqoT.html#method-i-bd","( var = 0.0 )","<p>From utilities.rb:<br> if you want to use BigDecimal math\n"],["center","EqoT","EqoT.html#method-i-center","( ta = A2000)","<p>From angles.rb:<br> equation of centre added to mean anomaly to get true\nanomaly.\n"],["check_date_nil","EqoT","EqoT.html#method-i-check_date_nil","( d = D2000 )","<p>From utilities.rb:<br>  A check for default D2000 sets default when arg is\nnil\n"],["check_date_zero","EqoT","EqoT.html#method-i-check_date_zero","( d = D2000 )","<p>From utilities.rb:<br>  A check for default D2000 sets default when arg is\nzero\n"],["check_jct_nil","EqoT","EqoT.html#method-i-check_jct_nil","( ta = A2000 )","<p>From utilities.rb:<br>  A check for default A2000 sets default when arg is\nnil\n"],["check_jct_zero","EqoT","EqoT.html#method-i-check_jct_zero","( ta = A2000 )","<p>From utilities.rb:<br>  A check for default A2000 sets default when arg is\nzero\n"],["check_jd_nil","EqoT","EqoT.html#method-i-check_jd_nil","( jd = J2000 )","<p>From utilities.rb:<br>  A check for default J2000 sets default when arg is\nnil\n"],["check_jd_zero","EqoT","EqoT.html#method-i-check_jd_zero","( jd = J2000 )","<p>From utilities.rb:<br>  A check for default J2000 sets default when arg is\nzero\n"],["check_t_nil","EqoT","EqoT.html#method-i-check_t_nil","( dt = DT2000 )","<p>From utilities.rb:<br>  A check for default DT2000 sets default when arg is\nnil\n"],["check_t_zero","EqoT","EqoT.html#method-i-check_t_zero","( dt = DT2000 )","<p>From utilities.rb:<br> A check for default DT2000 sets default when arg is\nzero\n"],["cosd","EqoT","EqoT.html#method-i-cosd","( x = 0.0 )","<p>From utilities.rb:<br> Trig function for cosine of degrees used in the\nnutation table calculations\n"],["cosine_al_Sun","EqoT","EqoT.html#method-i-cosine_al_Sun","( ta = A2000 )","<p>From angles.rb:<br> cosine apparent longitude could be useful when dividing\n"],["cosine_apparent_longitude","EqoT","EqoT.html#method-i-cosine_apparent_longitude","( ta = A2000 )",""],["cosine_tl_Sun","EqoT","EqoT.html#method-i-cosine_tl_Sun","( ta = A2000 )","<p>From angles.rb:<br> cosine true longitude used in solar right ascension\n"],["cosine_to_Earth","EqoT","EqoT.html#method-i-cosine_to_Earth","( ta = A2000 )","<p>From angles.rb:<br> cosine true obliquity used in solar right ascension\n"],["cosine_true_longitude","EqoT","EqoT.html#method-i-cosine_true_longitude","( ta = A2000 )",""],["cosine_true_obliquity","EqoT","EqoT.html#method-i-cosine_true_obliquity","( ta = A2000 )",""],["dec_Sun","EqoT","EqoT.html#method-i-dec_Sun","( ta = A2000 )","<p>From angles.rb:<br> solar declination\n"],["declination","EqoT","EqoT.html#method-i-declination","( ta = A2000 )",""],["declination_string","EqoT","EqoT.html#method-i-declination_string","( ta = A2000 )",""],["deg_to_rad","EqoT","EqoT.html#method-i-deg_to_rad","( degrees = 0.0 )","<p>From utilities.rb:<br> degrees to radians conversion aliased by\ndegrees_to_radians\n"],["degrees_to_radians","EqoT","EqoT.html#method-i-degrees_to_radians","( degrees = 0.0 )",""],["degrees_to_s","EqoT","EqoT.html#method-i-degrees_to_s","( degrees = 0.0 )","<p>From displays.rb<br> String formatter for d:m:s display\n"],["delta_epsilon","EqoT","EqoT.html#method-i-delta_epsilon","( ta = A2000 )","<p>From angles.rb:<br> delta epsilon component of equation of equinox\n"],["delta_equinox","EqoT","EqoT.html#method-i-delta_equinox","( ta = A2000 )","<p>From nutation.rb<br> nutation data terms are used here. arc seconds are\nused for these terms see\naa.usno.navy.mil/publications/docs/Circular_179.pdf …\n"],["delta_oblique","EqoT","EqoT.html#method-i-delta_oblique","( ta = A2000 )","<p>From angles.rb:<br> one time component to total equation of time\n"],["delta_orbit","EqoT","EqoT.html#method-i-delta_orbit","( ta = A2000 )","<p>From angles.rb:<br> one time component to total equation of time\n"],["delta_psi","EqoT","EqoT.html#method-i-delta_psi","( ta = A2000 )","<p>From angles.rb:<br> component of equation of equinox\n"],["delta_t_ecliptic","EqoT","EqoT.html#method-i-delta_t_ecliptic","( ta = A2000 )",""],["delta_t_elliptic","EqoT","EqoT.html#method-i-delta_t_elliptic","( ta = A2000 )",""],["display_equation_of_time","EqoT","EqoT.html#method-i-display_equation_of_time","()",""],["display_time_string","EqoT","EqoT.html#method-i-display_time_string","( dt = DT2000 )",""],["eccentricity_Earth","EqoT","EqoT.html#method-i-eccentricity_Earth","( ta = A2000 )","<p>From angles.rb:<br> eccentricity of elliptical Earth orbit around Sun\nHorner calculation method\n"],["eccentricity_earth_orbit","EqoT","EqoT.html#method-i-eccentricity_earth_orbit","( ta = A2000 )",""],["eot","EqoT","EqoT.html#method-i-eot","()","<p>From angles.rb:<br> total equation of time\n"],["eot_jd","EqoT","EqoT.html#method-i-eot_jd","()","<p>From times.rb:<br> Uses @ajd attribute Returns EOT as an AJD Julian number\n"],["eq_of_equinox","EqoT","EqoT.html#method-i-eq_of_equinox","( ta = A2000 )","<p>From angles.rb:<br> equation of equinox\n"],["equation_of_center","EqoT","EqoT.html#method-i-equation_of_center","( ta = A2000)",""],["factor","EqoT","EqoT.html#method-i-factor","()","<p>From angles.rb:<br> angle factor for daily sidereal time (experimental)\n"],["geometric_mean_longitude","EqoT","EqoT.html#method-i-geometric_mean_longitude","( ta = A2000 )",""],["get_coordinates_from_address","GeoLatLng","GeoLatLng.html#method-i-get_coordinates_from_address","()","<p>coordinates lookup\n"],["gml_Sun","EqoT","EqoT.html#method-i-gml_Sun","( ta = A2000 )","<p>From angles.rb:<br> angle geometric mean longitude needed to get true\nlongitude for low accuracy.\n"],["ha_Sun","EqoT","EqoT.html#method-i-ha_Sun","( ta = A2000 )","<p>From angles.rb:<br> horizon angle for provided geo coordinates used for\nangles from transit to horizon\n"],["horizon_angle","EqoT","EqoT.html#method-i-horizon_angle","( ta = A2000 )",""],["jd_to_date_string","EqoT","EqoT.html#method-i-jd_to_date_string","( jd = J2000 )",""],["julian_period_day_fraction_to_time","EqoT","EqoT.html#method-i-julian_period_day_fraction_to_time","( jpd_time = 0.0 )",""],["ma_Sun","EqoT","EqoT.html#method-i-ma_Sun","()","<p>From angles.rb:<br> angle of Suns&#39; mean anomaly used in equation of\ntime and to get true anomaly.\n"],["mean_anomaly","EqoT","EqoT.html#method-i-mean_anomaly","()",""],["mean_anomaly_string","EqoT","EqoT.html#method-i-mean_anomaly_string","()",""],["mean_local_noon_dt","EqoT","EqoT.html#method-i-mean_local_noon_dt","()","<p>From times.rb:<br> Uses @ajd and @longitude attributes Returns DateTime\nobject of local mean noon or solar …\n"],["mean_longitude_aries","EqoT","EqoT.html#method-i-mean_longitude_aries","( ta = A2000 )",""],["mean_obliquity","EqoT","EqoT.html#method-i-mean_obliquity","( ta = A2000 )",""],["mean_obliquity_of_ecliptic","EqoT","EqoT.html#method-i-mean_obliquity_of_ecliptic","( ta = A2000 )",""],["ml_Aries","EqoT","EqoT.html#method-i-ml_Aries","( ta = A2000 )","<p>From angles.rb:<br> Mean equinox point where right ascension is measured\nfrom as zero hours. # see www.iausofa.org/publications/aas04.pdf …\n"],["mo_Earth","EqoT","EqoT.html#method-i-mo_Earth","( ta = A2000 )","<p>From angles.rb:<br> mean obliquity of Earth\n"],["mod_360","EqoT","EqoT.html#method-i-mod_360","( x = 0.0 )","<p>From utilities.rb:<br> Keeps large angles in range of 360.0 aliased by\ntruncate\n"],["new","EqoT","EqoT.html#method-c-new","(addr=nil)","<p>From init.rb:<br> Initialize loads nutation data with safe_yaml and is\nfrozen, atrributes are set. You may …\n"],["new","GeoLatLng","GeoLatLng.html#method-c-new","()","<p>Instance variables\n"],["now","EqoT","EqoT.html#method-i-now","()","<p>From times.rb:<br> Uses changed @ajd attribute Returns EOT (equation of\ntime) now in decimal minutes time …\n"],["obliquity_correction","EqoT","EqoT.html#method-i-obliquity_correction","( ta = A2000 )",""],["omega","EqoT","EqoT.html#method-i-omega","( ta = A2000 )","<p>From angles.rb:<br> omega is a component of nutation and used  in apparent\nlongitude  omega is the longitude …\n"],["ra_Sun","EqoT","EqoT.html#method-i-ra_Sun","( ta = A2000 )","<p>From angles.rb:<br> solar right ascension\n"],["rad_to_deg","EqoT","EqoT.html#method-i-rad_to_deg","( radians = 0.0 )","<p>From utilities.rb:<br> radians to degrees conversion aliased by\nradians_to_degrees\n"],["radians_to_degrees","EqoT","EqoT.html#method-i-radians_to_degrees","( radians = 0.0 )",""],["right_ascension","EqoT","EqoT.html#method-i-right_ascension","( ta = A2000 )",""],["right_ascension_string","EqoT","EqoT.html#method-i-right_ascension_string","( ta = A2000 )",""],["show_minutes","EqoT","EqoT.html#method-i-show_minutes","(min = 0.0)","<p>From displays.rb<br> String formatter for + and - time\n"],["show_now","EqoT","EqoT.html#method-i-show_now","(now = now(Time.now.utc))","<p>From displays.rb<br> String for time now\n"],["sind","EqoT","EqoT.html#method-i-sind","( x = 0.0 )","<p>From utilities.rb:<br> Trig function for sine of degrees used in the\nnutation table calculations\n"],["sine_al_Sun","EqoT","EqoT.html#method-i-sine_al_Sun","( ta = A2000 )","<p>From angles.rb:<br> sine apparent longitude used in solar declination\n"],["sine_apparent_longitude","EqoT","EqoT.html#method-i-sine_apparent_longitude","( ta = A2000 )",""],["sine_tl_Sun","EqoT","EqoT.html#method-i-sine_tl_Sun","( ta = A2000 )","<p>From angles.rb:<br> sine true longitude used in solar right ascension\n"],["sine_true_longitude","EqoT","EqoT.html#method-i-sine_true_longitude","( ta = A2000 )",""],["string_al_Sun","EqoT","EqoT.html#method-i-string_al_Sun","( ta = A2000 )","<p>From displays.rb<br> String format of apparent longitude\n"],["string_day_fraction_to_time","EqoT","EqoT.html#method-i-string_day_fraction_to_time","( jpd_time = 0.0 )","<p>From displays.rb<br> String formatter for fraction of Julian day number\n"],["string_dec_Sun","EqoT","EqoT.html#method-i-string_dec_Sun","( ta = A2000 )","<p>From displays.rb<br> String format of declination\n"],["string_delta_oblique","EqoT","EqoT.html#method-i-string_delta_oblique","( ta = A2000 )","<p>From displays.rb<br> String format for delta oblique\n"],["string_delta_orbit","EqoT","EqoT.html#method-i-string_delta_orbit","( ta = A2000 )","<p>From displays.rb<br> String format for delta orbit\n"],["string_eot","EqoT","EqoT.html#method-i-string_eot","()","<p>From displays.rb<br> Equation of time output for minutes and seconds\n"],["string_eqc","EqoT","EqoT.html#method-i-string_eqc","( ta = A2000 )","<p>From displays.rb<br> String format for centre\n"],["string_jd_to_date","EqoT","EqoT.html#method-i-string_jd_to_date","( jd = J2000 )","<p>From displays.rb<br> String format conversion of jd to date\n"],["string_ma_Sun","EqoT","EqoT.html#method-i-string_ma_Sun","()","<p>From displays.rb<br> String format of mean anomaly\n"],["string_ra_Sun","EqoT","EqoT.html#method-i-string_ra_Sun","( ta = A2000 )","<p>From displays.rb<br> String format of right ascension\n"],["string_ta_Sun","EqoT","EqoT.html#method-i-string_ta_Sun","( ta = A2000 )","<p>From displays.rb<br> String format of true anomaly\n"],["string_time","EqoT","EqoT.html#method-i-string_time","( dt = DT2000 )","<p>From displays.rb<br> String formatter for h:m:s display\n"],["string_tl_Sun","EqoT","EqoT.html#method-i-string_tl_Sun","( ta = A2000 )","<p>From displays.rb<br> String format of true longitude\n"],["string_to_Earth","EqoT","EqoT.html#method-i-string_to_Earth","( ta = A2000 )","<p>From displays.rb<br> String format of true obliquity\n"],["sunrise_dt","EqoT","EqoT.html#method-i-sunrise_dt","()","<p>From times.rb:<br> Uses @ajd attribute Returns a DateTime object of local\nsunrise\n"],["sunrise_jd","EqoT","EqoT.html#method-i-sunrise_jd","()","<p>From times.rb:<br>  Uses @ajd attribute Returns Sunrise as a Julian number\n"],["sunset_dt","EqoT","EqoT.html#method-i-sunset_dt","()","<p>From times.rb:<br> Uses @ajd attribute Returns a DateTime object of local\nsunset\n"],["sunset_jd","EqoT","EqoT.html#method-i-sunset_jd","()","<p>From times.rb:<br> Uses @ajd attribute Returns Sunset as a Julian number\n"],["ta_Sun","EqoT","EqoT.html#method-i-ta_Sun","( ta = A2000 )","<p>From angles.rb:<br> angle true anomaly used in equation of time\n"],["time_delta_oblique","EqoT","EqoT.html#method-i-time_delta_oblique","()","<p>From times.rb:<br> Uses @ajd attribute Returns Oblique component of EOT in\ndecimal minutes time\n"],["time_delta_orbit","EqoT","EqoT.html#method-i-time_delta_orbit","()","<p>From times.rb:<br> Uses @ajd attribute Returns Orbit component of EOT in\ndecimal minutes time\n"],["time_eot","EqoT","EqoT.html#method-i-time_eot","()","<p>From times.rb:<br> Uses @ajd attribute Returns EOT as a float for decimal\nminutes time\n"],["time_julian_centurey","EqoT","EqoT.html#method-i-time_julian_centurey","( dt = DT2000 )",""],["time_julian_century","EqoT","EqoT.html#method-i-time_julian_century","( dt = DT2000 )","<p>From times.rb:<br> All calculations with ( ta )  based on this. Julian\nCentury Time is a fractional century …\n"],["tl_Aries","EqoT","EqoT.html#method-i-tl_Aries","( ta = A2000 )","<p>From angles.rb:<br> true longitude of equinox &#39;first point of\naries&#39; considers nutation\n"],["tl_Sun","EqoT","EqoT.html#method-i-tl_Sun","( ta = A2000 )","<p>From angles.rb:<br> angle of true longitude sun used in equation of time\n"],["to_Earth","EqoT","EqoT.html#method-i-to_Earth","( ta = A2000 )","<p>From angles.rb:<br> true obliquity considers nutation\n"],["to_deg","EqoT","EqoT.html#method-i-to_deg","( arc_secs = 0.0 )","<p>From utilities.rb:<br> arc seconds to degree conversion\n"],["true_anomaly","EqoT","EqoT.html#method-i-true_anomaly","( ta = A2000 )",""],["true_anomaly_string","EqoT","EqoT.html#method-i-true_anomaly_string","( ta = A2000 )",""],["true_longitude","EqoT","EqoT.html#method-i-true_longitude","( ta = A2000 )",""],["true_longitude_aries","EqoT","EqoT.html#method-i-true_longitude_aries","( ta = A2000 )",""],["true_longitude_string","EqoT","EqoT.html#method-i-true_longitude_string","( ta = A2000 )",""],["true_obliquity","EqoT","EqoT.html#method-i-true_obliquity","( ta = A2000 )",""],["true_obliquity_string","EqoT","EqoT.html#method-i-true_obliquity_string","( ta = A2000 )",""],["truncate","EqoT","EqoT.html#method-i-truncate","( x = 0.0 )",""],["README","","README_md.html","","<p><img src=\"https://badge.fury.io/rb/equationoftime.png\">\n<p>RDocs\n<p> created from equation_of_time.py\n"],["README","","README_txt.html","","<p>Installation:\n<p>Fork it and Clone it:\n\n<pre>$ git clone git@github.com:DouglasAllen/equationoftime-2.3.8.git</pre>\n"],["wiki","","wiki_md.html","","<p>Wiki1:\n\n<pre class=\"ruby\"> $ <span class=\"ruby-identifier\">irb</span> <span class=\"ruby-operator\">-</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">simple</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">prompt</span>\r\n\n <span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;eot&#39;</span>\r\n <span class=\"ruby-comment\"># nutation data loads and data flys by on the irb console ...</span>\n</pre>\n"]]}}