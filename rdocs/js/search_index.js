var search_data = {"index":{"searchIndex":["eot","geolatlng","addr=()","ajd=()","ajd_to_datetime()","al_sun()","angle_delta_oblique()","angle_delta_orbit()","angle_delta_psi()","angle_equation_of_time()","apparent_longitude()","apparent_longitude_string()","center()","check_jd_nil()","check_jd_zero()","check_t_nil()","check_t_zero()","cosine_al_sun()","cosine_apparent_longitude()","cosine_tl_sun()","cosine_to_earth()","cosine_true_longitude()","cosine_true_obliquity()","dec_sun()","declination()","declination_string()","degrees_to_s()","delta_epsilon()","delta_equinox()","delta_oblique()","delta_orbit()","delta_psi()","delta_t_ecliptic()","delta_t_elliptic()","display_equation_of_time()","display_time_string()","eccentricity_earth()","eccentricity_earth_orbit()","eot()","eot_jd()","eq_of_equinox()","equation_of_center()","factor()","geometric_mean_longitude()","get_coordinates_from_address()","gml_sun()","ha_sun()","horizon_angle()","jd_to_date_string()","julian_period_day_fraction_to_time()","local_noon_dt()","ma_sun()","mean_anomaly()","mean_anomaly_string()","mean_local_noon_dt()","mean_longitude_aries()","mean_obliquity()","mean_obliquity_of_ecliptic()","ml_aries()","mo_earth()","mod_360()","new()","new()","now()","obliquity_correction()","omega()","ra_sun()","right_ascension()","right_ascension_string()","show_minutes()","show_now()","sine_al_sun()","sine_apparent_longitude()","sine_tl_sun()","sine_true_longitude()","string_al_sun()","string_day_fraction_to_time()","string_dec_sun()","string_delta_oblique()","string_delta_orbit()","string_eot()","string_eqc()","string_jd_to_date()","string_ma_sun()","string_ra_sun()","string_ta_sun()","string_time()","string_tl_sun()","string_to_earth()","sunrise_dt()","sunrise_jd()","sunset_dt()","sunset_jd()","ta_sun()","time_delta_oblique()","time_delta_orbit()","time_eot()","time_julian_centurey()","time_julian_century()","tl_aries()","tl_sun()","to_earth()","true_anomaly()","true_anomaly_string()","true_longitude()","true_longitude_aries()","true_longitude_string()","true_obliquity()","true_obliquity_string()","truncate()","readme","wiki"],"longSearchIndex":["eot","geolatlng","geolatlng#addr=()","eot#ajd=()","eot#ajd_to_datetime()","eot#al_sun()","eot#angle_delta_oblique()","eot#angle_delta_orbit()","eot#angle_delta_psi()","eot#angle_equation_of_time()","eot#apparent_longitude()","eot#apparent_longitude_string()","eot#center()","eot#check_jd_nil()","eot#check_jd_zero()","eot#check_t_nil()","eot#check_t_zero()","eot#cosine_al_sun()","eot#cosine_apparent_longitude()","eot#cosine_tl_sun()","eot#cosine_to_earth()","eot#cosine_true_longitude()","eot#cosine_true_obliquity()","eot#dec_sun()","eot#declination()","eot#declination_string()","eot#degrees_to_s()","eot#delta_epsilon()","eot#delta_equinox()","eot#delta_oblique()","eot#delta_orbit()","eot#delta_psi()","eot#delta_t_ecliptic()","eot#delta_t_elliptic()","eot#display_equation_of_time()","eot#display_time_string()","eot#eccentricity_earth()","eot#eccentricity_earth_orbit()","eot#eot()","eot#eot_jd()","eot#eq_of_equinox()","eot#equation_of_center()","eot#factor()","eot#geometric_mean_longitude()","geolatlng#get_coordinates_from_address()","eot#gml_sun()","eot#ha_sun()","eot#horizon_angle()","eot#jd_to_date_string()","eot#julian_period_day_fraction_to_time()","eot#local_noon_dt()","eot#ma_sun()","eot#mean_anomaly()","eot#mean_anomaly_string()","eot#mean_local_noon_dt()","eot#mean_longitude_aries()","eot#mean_obliquity()","eot#mean_obliquity_of_ecliptic()","eot#ml_aries()","eot#mo_earth()","eot#mod_360()","eot::new()","geolatlng::new()","eot#now()","eot#obliquity_correction()","eot#omega()","eot#ra_sun()","eot#right_ascension()","eot#right_ascension_string()","eot#show_minutes()","eot#show_now()","eot#sine_al_sun()","eot#sine_apparent_longitude()","eot#sine_tl_sun()","eot#sine_true_longitude()","eot#string_al_sun()","eot#string_day_fraction_to_time()","eot#string_dec_sun()","eot#string_delta_oblique()","eot#string_delta_orbit()","eot#string_eot()","eot#string_eqc()","eot#string_jd_to_date()","eot#string_ma_sun()","eot#string_ra_sun()","eot#string_ta_sun()","eot#string_time()","eot#string_tl_sun()","eot#string_to_earth()","eot#sunrise_dt()","eot#sunrise_jd()","eot#sunset_dt()","eot#sunset_jd()","eot#ta_sun()","eot#time_delta_oblique()","eot#time_delta_orbit()","eot#time_eot()","eot#time_julian_centurey()","eot#time_julian_century()","eot#tl_aries()","eot#tl_sun()","eot#to_earth()","eot#true_anomaly()","eot#true_anomaly_string()","eot#true_longitude()","eot#true_longitude_aries()","eot#true_longitude_string()","eot#true_obliquity()","eot#true_obliquity_string()","eot#truncate()","",""],"info":[["Eot","","Eot.html","","<p>angles.rb\n<p>displays.rb\n<p>init.rb\n"],["GeoLatLng","","GeoLatLng.html","","<p>class for location lookup  in geo_lat_lng_smt.rb\n"],["addr=","GeoLatLng","GeoLatLng.html#method-i-addr-3D","(addr = @default_int)","<p>set address\n"],["ajd=","Eot","Eot.html#method-i-ajd-3D","(ajd)","<p>Method for change of @ajd from the default so @ma will get set anew.\nCalling ma_Sun method will set @ta …\n"],["ajd_to_datetime","Eot","Eot.html#method-i-ajd_to_datetime","(ajd)","<p>From times.rb:<br> Pass in an AJD number Returns a DateTime object\n"],["al_Sun","Eot","Eot.html#method-i-al_Sun","()","<p>From angles.rb:<br>  Apparent solar longitude = true longitude - aberation\n"],["angle_delta_oblique","Eot","Eot.html#method-i-angle_delta_oblique","()","<p>From angles.rb:<br> one time component to total equation of time\n"],["angle_delta_orbit","Eot","Eot.html#method-i-angle_delta_orbit","()","<p>From angles.rb:<br>  one time component to total equation of time\n"],["angle_delta_psi","Eot","Eot.html#method-i-angle_delta_psi","()","<p>From angles.rb:<br> component of equation of equinox\n"],["angle_equation_of_time","Eot","Eot.html#method-i-angle_equation_of_time","()","<p>From angles.rb:<br> total equation of time\n"],["apparent_longitude","Eot","Eot.html#method-i-apparent_longitude","()",""],["apparent_longitude_string","Eot","Eot.html#method-i-apparent_longitude_string","()",""],["center","Eot","Eot.html#method-i-center","()","<p>From angles.rb:<br> equation of centre added to mean anomaly to get true\nanomaly.\n"],["check_jd_nil","Eot","Eot.html#method-i-check_jd_nil","( jd = DJ00 )","<p>From utilities.rb:<br>  A check for default J2000 sets default when arg is\nnil\n"],["check_jd_zero","Eot","Eot.html#method-i-check_jd_zero","( jd = DJ00 )","<p>From utilities.rb:<br>  A check for default J2000 sets default when arg is\nzero\n"],["check_t_nil","Eot","Eot.html#method-i-check_t_nil","( dt = DT2000 )","<p>From utilities.rb:<br>  A check for default DT2000 sets default when arg is\nnil\n"],["check_t_zero","Eot","Eot.html#method-i-check_t_zero","( dt = DT2000 )","<p>From utilities.rb:<br> A check for default DT2000 sets default when arg is\nzero\n"],["cosine_al_Sun","Eot","Eot.html#method-i-cosine_al_Sun","()","<p>From angles.rb:<br> cosine apparent longitude could be useful when dividing\n"],["cosine_apparent_longitude","Eot","Eot.html#method-i-cosine_apparent_longitude","()",""],["cosine_tl_Sun","Eot","Eot.html#method-i-cosine_tl_Sun","()","<p>From angles.rb:<br> cosine true longitude used in solar right ascension\n"],["cosine_to_Earth","Eot","Eot.html#method-i-cosine_to_Earth","()","<p>From angles.rb:<br> cosine true obliquity used in solar right ascension\n"],["cosine_true_longitude","Eot","Eot.html#method-i-cosine_true_longitude","()",""],["cosine_true_obliquity","Eot","Eot.html#method-i-cosine_true_obliquity","()",""],["dec_Sun","Eot","Eot.html#method-i-dec_Sun","()","<p>From angles.rb:<br> solar declination\n"],["declination","Eot","Eot.html#method-i-declination","()",""],["declination_string","Eot","Eot.html#method-i-declination_string","()",""],["degrees_to_s","Eot","Eot.html#method-i-degrees_to_s","( radians = 0.0 )","<p>From displays.rb<br> String formatter for d:m:s display\n"],["delta_epsilon","Eot","Eot.html#method-i-delta_epsilon","()","<p>From angles.rb:<br> delta epsilon component of equation of equinox\n"],["delta_equinox","Eot","Eot.html#method-i-delta_equinox","()","<p>From nutation.rb<br> Returns array with [ delta_eps, delta_psi, ma_sun,\nomega] celes gem is used here …\n"],["delta_oblique","Eot","Eot.html#method-i-delta_oblique","()","<p>From angles.rb:<br> one time component to total equation of time\n"],["delta_orbit","Eot","Eot.html#method-i-delta_orbit","()","<p>From angles.rb:<br> one time component to total equation of time\n"],["delta_psi","Eot","Eot.html#method-i-delta_psi","()","<p>From angles.rb:<br> component of equation of equinox\n"],["delta_t_ecliptic","Eot","Eot.html#method-i-delta_t_ecliptic","()",""],["delta_t_elliptic","Eot","Eot.html#method-i-delta_t_elliptic","()",""],["display_equation_of_time","Eot","Eot.html#method-i-display_equation_of_time","()",""],["display_time_string","Eot","Eot.html#method-i-display_time_string","( dt = DT2000 )",""],["eccentricity_Earth","Eot","Eot.html#method-i-eccentricity_Earth","()","<p>From angles.rb:<br> eccentricity of elliptical Earth orbit around Sun\nHorners’ calculation method\n"],["eccentricity_earth_orbit","Eot","Eot.html#method-i-eccentricity_earth_orbit","()",""],["eot","Eot","Eot.html#method-i-eot","()","<p>From angles.rb:<br> total equation of time\n"],["eot_jd","Eot","Eot.html#method-i-eot_jd","()","<p>From times.rb:<br> Uses @ajd attribute Returns EOT as an AJD Julian number\n"],["eq_of_equinox","Eot","Eot.html#method-i-eq_of_equinox","()","<p>From angles.rb:<br> equation of equinox\n"],["equation_of_center","Eot","Eot.html#method-i-equation_of_center","()",""],["factor","Eot","Eot.html#method-i-factor","()","<p>From angles.rb:<br> angle factor for daily sidereal time (experimental)\n"],["geometric_mean_longitude","Eot","Eot.html#method-i-geometric_mean_longitude","()",""],["get_coordinates_from_address","GeoLatLng","GeoLatLng.html#method-i-get_coordinates_from_address","()","<p>coordinates lookup\n"],["gml_Sun","Eot","Eot.html#method-i-gml_Sun","()","<p>From angles.rb:<br> angle geometric mean longitude needed to get true\nlongitude for low accuracy.\n"],["ha_Sun","Eot","Eot.html#method-i-ha_Sun","()","<p>From angles.rb:<br> horizon angle for provided geo coordinates used for\nangles from transit to horizons\n"],["horizon_angle","Eot","Eot.html#method-i-horizon_angle","()",""],["jd_to_date_string","Eot","Eot.html#method-i-jd_to_date_string","( jd = DJ00 )",""],["julian_period_day_fraction_to_time","Eot","Eot.html#method-i-julian_period_day_fraction_to_time","( jpd_time = 0.0 )",""],["local_noon_dt","Eot","Eot.html#method-i-local_noon_dt","()","<p>From times.rb:<br> Uses @ajd and @longitude attributes Returns DateTime\nobject of local noon or solar transit …\n"],["ma_Sun","Eot","Eot.html#method-i-ma_Sun","()","<p>From angles.rb:<br> angle of Suns’ mean anomaly used in equation of time\nand to get true anomaly.\n"],["mean_anomaly","Eot","Eot.html#method-i-mean_anomaly","()",""],["mean_anomaly_string","Eot","Eot.html#method-i-mean_anomaly_string","()",""],["mean_local_noon_dt","Eot","Eot.html#method-i-mean_local_noon_dt","()","<p>From times.rb:<br> Uses @ajd and @longitude attributes Returns DateTime\nobject of local mean noon or solar …\n"],["mean_longitude_aries","Eot","Eot.html#method-i-mean_longitude_aries","()",""],["mean_obliquity","Eot","Eot.html#method-i-mean_obliquity","()",""],["mean_obliquity_of_ecliptic","Eot","Eot.html#method-i-mean_obliquity_of_ecliptic","()",""],["ml_Aries","Eot","Eot.html#method-i-ml_Aries","()","<p>From angles.rb:<br> Mean equinox point where right ascension is measured\nfrom as zero hours. # see www.iausofa.org/publications/aas04.pdf …\n"],["mo_Earth","Eot","Eot.html#method-i-mo_Earth","()","<p>From angles.rb:<br> mean obliquity of Earth\n"],["mod_360","Eot","Eot.html#method-i-mod_360","( x = 0.0 )","<p>From utilities.rb:<br> Keeps large angles in range of 360.0 aliased by\ntruncate\n"],["new","Eot","Eot.html#method-c-new","(addr=nil)","<p>From init.rb:<br> Initialize to set attributes  You may use GeoLatLng to\nset up @latitude and @longitude …\n"],["new","GeoLatLng","GeoLatLng.html#method-c-new","()","<p>Instance variables\n"],["now","Eot","Eot.html#method-i-now","()","<p>From times.rb:<br> sets @ajd to DateTime.now Returns EOT (equation of time)\nnow in decimal minutes form\n"],["obliquity_correction","Eot","Eot.html#method-i-obliquity_correction","()",""],["omega","Eot","Eot.html#method-i-omega","()","<p>From angles.rb:<br> omega is a component of nutation and used  in apparent\nlongitude  omega is the longitude …\n"],["ra_Sun","Eot","Eot.html#method-i-ra_Sun","()","<p>From angles.rb:<br> solar right ascension\n"],["right_ascension","Eot","Eot.html#method-i-right_ascension","()",""],["right_ascension_string","Eot","Eot.html#method-i-right_ascension_string","()",""],["show_minutes","Eot","Eot.html#method-i-show_minutes","(min = 0.0)","<p>From displays.rb<br> String formatter for + and - time\n"],["show_now","Eot","Eot.html#method-i-show_now","(now = now(Time.now.utc))","<p>From displays.rb<br> String for time now\n"],["sine_al_Sun","Eot","Eot.html#method-i-sine_al_Sun","()","<p>From angles.rb:<br> sine apparent longitude used in solar declination\n"],["sine_apparent_longitude","Eot","Eot.html#method-i-sine_apparent_longitude","()",""],["sine_tl_Sun","Eot","Eot.html#method-i-sine_tl_Sun","()","<p>From angles.rb:<br> sine true longitude used in solar right ascension\n"],["sine_true_longitude","Eot","Eot.html#method-i-sine_true_longitude","()",""],["string_al_Sun","Eot","Eot.html#method-i-string_al_Sun","()","<p>From displays.rb<br> String format of apparent longitude\n"],["string_day_fraction_to_time","Eot","Eot.html#method-i-string_day_fraction_to_time","( jpd_time = 0.0 )","<p>From displays.rb<br> String formatter for fraction of Julian day number\n"],["string_dec_Sun","Eot","Eot.html#method-i-string_dec_Sun","()","<p>From displays.rb<br> String format of declination\n"],["string_delta_oblique","Eot","Eot.html#method-i-string_delta_oblique","()","<p>From displays.rb<br> String format for delta oblique\n"],["string_delta_orbit","Eot","Eot.html#method-i-string_delta_orbit","()","<p>From displays.rb<br> String format for delta orbit\n"],["string_eot","Eot","Eot.html#method-i-string_eot","()","<p>From displays.rb<br> Equation of time output for minutes and seconds\n"],["string_eqc","Eot","Eot.html#method-i-string_eqc","()","<p>From displays.rb<br> String format for centre\n"],["string_jd_to_date","Eot","Eot.html#method-i-string_jd_to_date","( jd = DJ00 )","<p>From displays.rb<br> String format conversion of jd to date\n"],["string_ma_Sun","Eot","Eot.html#method-i-string_ma_Sun","()","<p>From displays.rb<br> String format of mean anomaly\n"],["string_ra_Sun","Eot","Eot.html#method-i-string_ra_Sun","()","<p>From displays.rb<br> String format of right ascension\n"],["string_ta_Sun","Eot","Eot.html#method-i-string_ta_Sun","( )","<p>From displays.rb<br> String format of true anomaly\n"],["string_time","Eot","Eot.html#method-i-string_time","( dt = DT2000 )","<p>From displays.rb<br> String formatter for h:m:s display\n"],["string_tl_Sun","Eot","Eot.html#method-i-string_tl_Sun","()","<p>From displays.rb<br> String format of true longitude\n"],["string_to_Earth","Eot","Eot.html#method-i-string_to_Earth","()","<p>From displays.rb<br> String format of true obliquity\n"],["sunrise_dt","Eot","Eot.html#method-i-sunrise_dt","()","<p>From times.rb:<br> Uses @ajd attribute Returns a DateTime object of local\nsunrise\n"],["sunrise_jd","Eot","Eot.html#method-i-sunrise_jd","()","<p>From times.rb:<br>  Uses @ajd attribute Returns Sunrise as a Julian Day\nNumber\n"],["sunset_dt","Eot","Eot.html#method-i-sunset_dt","()","<p>From times.rb:<br> Uses @ajd attribute Returns a DateTime object of local\nsunset\n"],["sunset_jd","Eot","Eot.html#method-i-sunset_jd","()","<p>From times.rb:<br> Uses @ajd attribute Returns Sunset as a Julian Day\nNumber\n"],["ta_Sun","Eot","Eot.html#method-i-ta_Sun","()","<p>From angles.rb:<br> angle true anomaly used in equation of time\n"],["time_delta_oblique","Eot","Eot.html#method-i-time_delta_oblique","()","<p>From times.rb:<br> Uses @ajd attribute Returns Oblique component of EOT in\ndecimal minutes time\n"],["time_delta_orbit","Eot","Eot.html#method-i-time_delta_orbit","()","<p>From times.rb:<br> Uses @ajd attribute Returns Orbit component of EOT in\ndecimal minutes time\n"],["time_eot","Eot","Eot.html#method-i-time_eot","()","<p>From times.rb:<br> Uses @ajd attribute Returns EOT as a float for decimal\nminutes time\n"],["time_julian_centurey","Eot","Eot.html#method-i-time_julian_centurey","()",""],["time_julian_century","Eot","Eot.html#method-i-time_julian_century","()","<p>From times.rb:<br> All calculations with ( ta )  were based on this. Julian\nCentury Time is a fractional …\n"],["tl_Aries","Eot","Eot.html#method-i-tl_Aries","()","<p>From angles.rb:<br> true longitude of equinox ‘first point of aries’\nconsiders nutation\n"],["tl_Sun","Eot","Eot.html#method-i-tl_Sun","()","<p>From angles.rb:<br> angle of true longitude sun used in equation of time\n"],["to_Earth","Eot","Eot.html#method-i-to_Earth","()","<p>From angles.rb:<br> true obliquity considers nutation\n"],["true_anomaly","Eot","Eot.html#method-i-true_anomaly","()",""],["true_anomaly_string","Eot","Eot.html#method-i-true_anomaly_string","( )",""],["true_longitude","Eot","Eot.html#method-i-true_longitude","()",""],["true_longitude_aries","Eot","Eot.html#method-i-true_longitude_aries","()",""],["true_longitude_string","Eot","Eot.html#method-i-true_longitude_string","()",""],["true_obliquity","Eot","Eot.html#method-i-true_obliquity","()",""],["true_obliquity_string","Eot","Eot.html#method-i-true_obliquity_string","()",""],["truncate","Eot","Eot.html#method-i-truncate","( x = 0.0 )",""],["README","","README_md.html","","<p><img src=\"https://badge.fury.io/rb/equationoftime.png\">\n<p>RDocs\n<p> created from equation_of_time.py\n"],["wiki","","wiki_md.html","","<p>Wiki 1:\n\n<pre class=\"ruby\"> $ <span class=\"ruby-identifier\">irb</span> <span class=\"ruby-operator\">-</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">simple</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">prompt</span>\n\n <span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'eot'</span>     \n <span class=\"ruby-identifier\">eot</span> = <span class=\"ruby-constant\">Eot</span>.<span class=\"ruby-identifier\">new</span>()\n <span class=\"ruby-identifier\">loop</span> <span class=\"ruby-keyword\">do</span>\n   <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">&quot;#{Time.now} #{eot.show_minutes(eot.now)}&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"]]}}